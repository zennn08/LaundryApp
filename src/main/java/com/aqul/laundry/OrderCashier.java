/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aqul.laundry;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;

/**
 *
 * @author LENOVO
 */
public class OrderCashier extends javax.swing.JFrame {
    private Credential creds;
    private TableRowSorter<DefaultTableModel> sorter;
    
    /**
     * Creates new form OrderCashier
     * @param creds
     */
    public OrderCashier(Credential creds) {
        initComponents();
        this.creds = creds;
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Laundry Application | Order");
        try {
            Statement state = Database.Connect().createStatement();
            String query = "SELECT * FROM service;";
            ResultSet result = state.executeQuery(query);
            
            weigthTextField.setText("0");
            
            while (result.next()) {
                int id = result.getInt("id");
                String name = result.getString("name");
                int price = result.getInt("price");
                Service service = new Service(id, name, price);
                serviceComboBox.addItem(service);
            }
        } catch (SQLException e) {
            System.err.println("SQLException : " + e.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        sidebarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        orderButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        orderPanel = new javax.swing.JPanel();
        orderFormLabel = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        customerNameTextField = new javax.swing.JTextField();
        customerPhoneLabel = new javax.swing.JLabel();
        customerPhoneTextField = new javax.swing.JTextField();
        serviceLabel = new javax.swing.JLabel();
        serviceComboBox = new javax.swing.JComboBox<>();
        weigthLabel = new javax.swing.JLabel();
        weigthTextField = new javax.swing.JTextField();
        weigthLabel1 = new javax.swing.JLabel();
        customerNameAlert = new javax.swing.JLabel();
        customerPhoneAlert = new javax.swing.JLabel();
        weigthAlert = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        amountPriceTextField = new javax.swing.JTextField();
        createOrderButton = new rojerusan.RSMaterialButtonRectangle();
        updatePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allOrderTable = new javax.swing.JTable();
        updateOrderLabel = new javax.swing.JLabel();
        searchOrderTextField = new javax.swing.JTextField();
        editOrderButton = new rojerusan.RSMaterialButtonRectangle();
        deleteOrderButton = new rojerusan.RSMaterialButtonRectangle();
        historyPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        historyOrderTable = new javax.swing.JTable();
        updateOrderLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(249, 250, 250));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));

        sidebarPanel.setBackground(new java.awt.Color(0, 145, 255));
        sidebarPanel.setPreferredSize(new java.awt.Dimension(230, 500));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Sitka Text", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Laundry Application");

        orderButton.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        orderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/order.png"))); // NOI18N
        orderButton.setText("Order");
        orderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        orderButton.setFocusable(false);
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        logoutButton.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 0, 0));
        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout.png"))); // NOI18N
        logoutButton.setText("Logout");
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.setFocusable(false);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.setFocusable(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        historyButton.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        historyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/history.png"))); // NOI18N
        historyButton.setText("History");
        historyButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        historyButton.setFocusable(false);
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidebarPanelLayout = new javax.swing.GroupLayout(sidebarPanel);
        sidebarPanel.setLayout(sidebarPanelLayout);
        sidebarPanelLayout.setHorizontalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        sidebarPanelLayout.setVerticalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(orderButton)
                .addGap(18, 18, 18)
                .addComponent(updateButton)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton)
                .addGap(24, 24, 24))
        );

        mainPanel.setLayout(new java.awt.CardLayout());

        orderPanel.setBackground(new java.awt.Color(249, 250, 250));

        orderFormLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        orderFormLabel.setText("Order Form");

        customerNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerNameLabel.setText("Nama Pelanggan");

        customerNameTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerNameTextFieldKeyPressed(evt);
            }
        });

        customerPhoneLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerPhoneLabel.setText("No. HP Pelanggan");

        customerPhoneTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerPhoneTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerPhoneTextFieldKeyPressed(evt);
            }
        });

        serviceLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serviceLabel.setText("Layanan");

        serviceComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serviceComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        serviceComboBox.setFocusable(false);
        serviceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceComboBoxActionPerformed(evt);
            }
        });
        serviceComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                serviceComboBoxKeyPressed(evt);
            }
        });

        weigthLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        weigthLabel.setText("Estimasi Berat");

        weigthTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        weigthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weigthTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                weigthTextFieldKeyReleased(evt);
            }
        });

        weigthLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        weigthLabel1.setText("/ Kg");

        customerNameAlert.setForeground(new java.awt.Color(255, 51, 0));

        customerPhoneAlert.setForeground(new java.awt.Color(255, 51, 0));

        weigthAlert.setForeground(new java.awt.Color(255, 51, 0));

        amountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        amountLabel.setText("Estimasi Harga");

        amountPriceTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        amountPriceTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        amountPriceTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        amountPriceTextField.setEnabled(false);
        amountPriceTextField.setFocusable(false);

        createOrderButton.setBackground(new java.awt.Color(0, 145, 255));
        createOrderButton.setText("Create Order");
        createOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderFormLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerPhoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(serviceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(weigthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(amountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(weigthAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerNameTextField)
                        .addComponent(customerPhoneTextField)
                        .addComponent(serviceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(orderPanelLayout.createSequentialGroup()
                            .addComponent(weigthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(weigthLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addComponent(customerNameAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerPhoneAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(amountPriceTextField)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(orderFormLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameLabel)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(customerNameAlert)
                .addGap(10, 10, 10)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPhoneLabel)
                    .addComponent(customerPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(customerPhoneAlert)
                .addGap(10, 10, 10)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceLabel)
                    .addComponent(serviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weigthLabel)
                    .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(weigthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(weigthLabel1)))
                .addGap(3, 3, 3)
                .addComponent(weigthAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountLabel)
                    .addComponent(amountPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        mainPanel.add(orderPanel, "card2");

        updatePanel.setBackground(new java.awt.Color(249, 250, 250));

        allOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Tanggal", "Status", "Berat", "Harga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allOrderTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        allOrderTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(allOrderTable);

        updateOrderLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        updateOrderLabel.setText("Table Order");

        searchOrderTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        searchOrderTextField.setToolTipText("Search Order");
        searchOrderTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchOrderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOrderTextFieldActionPerformed(evt);
            }
        });
        searchOrderTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchOrderTextFieldKeyReleased(evt);
            }
        });

        editOrderButton.setBackground(new java.awt.Color(0, 145, 255));
        editOrderButton.setText("Edit");
        editOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrderButtonActionPerformed(evt);
            }
        });

        deleteOrderButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteOrderButton.setText("HAPUS");
        deleteOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updatePanelLayout = new javax.swing.GroupLayout(updatePanel);
        updatePanel.setLayout(updatePanelLayout);
        updatePanelLayout.setHorizontalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchOrderTextField)
                    .addComponent(updateOrderLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, updatePanelLayout.createSequentialGroup()
                        .addComponent(editOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        updatePanelLayout.setVerticalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(updateOrderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(searchOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        mainPanel.add(updatePanel, "card3");

        historyPanel.setBackground(new java.awt.Color(249, 250, 250));

        historyOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Tanggal", "Status", "Berat", "Harga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(historyOrderTable);

        updateOrderLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        updateOrderLabel1.setText("History");

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addComponent(updateOrderLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(updateOrderLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        mainPanel.add(historyPanel, "card3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(sidebarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidebarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        changeMainPanel(orderPanel);
        this.setTitle("Laundry Application | Order");
    }//GEN-LAST:event_orderButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        changeMainPanel(updatePanel);
        this.setTitle("Laundry Application | Update Order");
        showAllOrder();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void weigthTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weigthTextFieldKeyReleased
        updatePrice();
    }//GEN-LAST:event_weigthTextFieldKeyReleased

    private void serviceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceComboBoxActionPerformed
        updatePrice();
    }//GEN-LAST:event_serviceComboBoxActionPerformed

    private void customerNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            customerNameTextField.transferFocus();
        }
    }//GEN-LAST:event_customerNameTextFieldKeyPressed

    private void customerPhoneTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerPhoneTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            customerPhoneTextField.transferFocus();
        }
    }//GEN-LAST:event_customerPhoneTextFieldKeyPressed

    private void serviceComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serviceComboBoxKeyPressed

    }//GEN-LAST:event_serviceComboBoxKeyPressed

    private void weigthTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weigthTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            createOrderButton.doClick();
        }
    }//GEN-LAST:event_weigthTextFieldKeyPressed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        changeMainPanel(historyPanel);
        this.setTitle("Laundry Application | History Order");
        showAllHistoryOrder();
    }//GEN-LAST:event_historyButtonActionPerformed

    private void searchOrderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrderTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchOrderTextFieldActionPerformed

    private void searchOrderTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderTextFieldKeyReleased
        String keyword = searchOrderTextField.getText();
        if (keyword.trim().isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword));
        }
    }//GEN-LAST:event_searchOrderTextFieldKeyReleased

    private void createOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrderButtonActionPerformed
        double weigth = 0;
        double estimasiHarga = 0;
        String customerName = customerNameTextField.getText();
        String customerPhone = customerPhoneTextField.getText();
        Service service = (Service) serviceComboBox.getSelectedItem();
        boolean lanjut = true;
        
        weigthAlert.setText("");
        customerNameAlert.setText("");
        customerPhoneAlert.setText("");
        amountPriceTextField.setText("");
       
        try {
            weigth = Double.parseDouble(weigthTextField.getText());
            estimasiHarga = service.getPrice() * weigth;
            amountPriceTextField.setText("Rp. " + String.format("%.2f", estimasiHarga));
        } catch (NumberFormatException e) {
            weigthAlert.setText("Estimasi berat tidak valid!");
            lanjut = false;
        }
        
        if (customerName.isEmpty()) {
            customerNameAlert.setText("Harap isi nama pelanggan!");
            lanjut = false;
        }
        
        if (customerPhone.isEmpty()) {
            customerPhoneAlert.setText("Harap ini nomor hp pelanggan!");
            lanjut = false;
        } else {
            String regexPhone = "^08[1-9][0-9]{7,10}$";
            Pattern pattern = Pattern.compile(regexPhone);
            Matcher matcher = pattern.matcher(customerPhone);
            if (!matcher.matches()) {
                customerPhoneAlert.setText("Nomor hp pelanggan tidak valid!");
                lanjut = false;
            }
        }
        
        if (lanjut) {
            try {
                Connection conn = Database.Connect();
                String queryFindUser = "SELECT * FROM user WHERE phone_number = ?";
                PreparedStatement findUserStatement = conn.prepareStatement(queryFindUser);
                findUserStatement.setString(1, customerPhone);
                ResultSet result = findUserStatement.executeQuery();

                int userId = -1;
                if (result.next()) {
                    userId = result.getInt("id");
                } else {
                    String queryInsertUser = "INSERT INTO user (nama, phone_number) VALUES (?, ?)";
                    PreparedStatement insertUserStatement = conn.prepareStatement(queryInsertUser, Statement.RETURN_GENERATED_KEYS);
                    insertUserStatement.setString(1, customerName);
                    insertUserStatement.setString(2, customerPhone);
                    int rowsInserted = insertUserStatement.executeUpdate();
                    
                    if (rowsInserted > 0) {
                        ResultSet resultInsert = insertUserStatement.getGeneratedKeys();
                        if (resultInsert.next()) {
                            userId = resultInsert.getInt(1);
                        } else {
                            throw new SQLException("Failed to retrieve user ID after insert");
                        }
                    } else {
                        throw new SQLException("Failed to insert user");
                    }
                }

                if (userId != -1) {
                    String queryInsertOrder = "INSERT INTO orders (user_id, service_id, admin_id, status, amount, order_date, total_price) VALUES (?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement pstmt = conn.prepareStatement(queryInsertOrder);
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                    // Mengisi nilai untuk parameter query
                    pstmt.setInt(1, userId);        // Kolom user_id
                    pstmt.setInt(2, service.getId());     // Kolom service_id
                    pstmt.setInt(3, creds.getId());       // Kolom admin_id
                    pstmt.setString(4, "Received");     // Kolom status
                    pstmt.setDouble(5, weigth);      // Kolom amount
                    pstmt.setString(6, dateFormat.format(new Date()));  // Kolom order_date (pastikan format tanggal sesuai)
                    pstmt.setInt(7, (int) Math.round(estimasiHarga));   // Kolom total_price

                    // Eksekusi query INSERT
                    int rowsInserted = pstmt.executeUpdate();

                    // Cek apakah data berhasil dimasukkan
                    if (rowsInserted > 0) {
                        System.out.println("Insert berhasil! " + rowsInserted + " baris dimasukkan.");
                        JOptionPane.showMessageDialog(this, "Order berhasil dibuat", "Success", JOptionPane.INFORMATION_MESSAGE);
                        clearForm();
                    }
                }
            } catch (SQLException e) {
                System.err.println("SQLException : " + e.getMessage());
            }
        }
    }//GEN-LAST:event_createOrderButtonActionPerformed

    private void editOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrderButtonActionPerformed
        int row = allOrderTable.getSelectedRow();
        System.out.println(row);
        if (row != -1) {
            String id = (String) allOrderTable.getValueAt(row, 0);
            String tanggal = (String) allOrderTable.getValueAt(row, 1);
            String nama = (String) allOrderTable.getValueAt(row, 2);
            String nomor = (String) allOrderTable.getValueAt(row, 3);
            String layanan = (String) allOrderTable.getValueAt(row, 5);
            String berat = (String) allOrderTable.getValueAt(row, 6);
            String harga = (String) allOrderTable.getValueAt(row, 7);
            new EditOrder(this, true, new String[] { id, tanggal, nama, nomor, layanan, berat, harga }).setVisible(true);
            showAllOrder();
        }
    }//GEN-LAST:event_editOrderButtonActionPerformed

    private void deleteOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderButtonActionPerformed
        int row = allOrderTable.getSelectedRow();
        System.out.println(row);
        if (row != -1) {
            String id = (String) allOrderTable.getValueAt(row, 0);
            try {
                String query = "DELETE FROM orders WHERE order_id = ?";
                PreparedStatement prepare = Database.Connect().prepareStatement(query);
                prepare.setInt(1, Integer.parseInt(id));
                int rowEffect = prepare.executeUpdate();
                
                if (rowEffect > 0) {
                    JOptionPane.showMessageDialog(this, "Order berhasil dihapus", "Success", JOptionPane.INFORMATION_MESSAGE);
                    showAllOrder();
                }
                
            } catch (SQLException e) {
                System.err.println("SQLException : " + e.getMessage());
            }
        }
    }//GEN-LAST:event_deleteOrderButtonActionPerformed

    public void clearForm() {
        customerNameTextField.setText("");
        customerPhoneTextField.setText("");
        weigthTextField.setText("0");
        amountPriceTextField.setText("");
    }
    
    public void updatePrice() {
        double weigth;
        double estimasiHarga = 0;
        int service = serviceComboBox.getSelectedIndex();
        try {
            weigth = Double.parseDouble(weigthTextField.getText());
            switch (service) {
                case 0, 1 -> estimasiHarga = weigth * 3000;
                case 2 ->      estimasiHarga = weigth * 5000;
                case 3 -> estimasiHarga = weigth * 10000;
            }
            amountPriceTextField.setText("Rp. " + String.format("%.2f", estimasiHarga));
            weigthAlert.setText("");
        } catch (NumberFormatException e) {
            weigthAlert.setText("Estimasi berat tidak valid!");
        }
    }

    public void changeMainPanel(javax.swing.JPanel panel) {
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();
        
        mainPanel.add(panel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }
    
    public void showAllOrder() {
        String[] coloumn = {"ID", "Tanggal", "Nama", "No. HP", "Status", "Layanan", "Berat", "Harga"};
        DefaultTableModel table = new DefaultTableModel(null, coloumn){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            String query = "SELECT * FROM orders JOIN user ON orders.user_id = user.id JOIN service ON orders.service_id = service.id WHERE status = 'Received';";
            Connection conn = Database.Connect();
            Statement state = conn.createStatement();
            ResultSet result = state.executeQuery(query);
            
            while (result.next()) {
                String id = result.getString("order_id");
                String tanggal = result.getString("order_date");
                String nama = result.getString("nama");
                String noHp = result.getString("phone_number");
                String status = result.getString("status");
                String layanan = result.getString("name");
                String berat = result.getString("amount");
                String harga = "Rp. " + result.getInt("total_price");
                
                table.addRow(new String[] {id, tanggal, nama, noHp, status, layanan, berat, harga});
            }
        } catch (SQLException e) {
            System.err.println("SQLException : " + e.getMessage());
        }
        
        allOrderTable.setModel(table);
        sorter = new TableRowSorter<>(table);
        allOrderTable.setRowSorter(sorter);
        allOrderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        autoFitTableColumns(allOrderTable);
    }
    
    public void showAllHistoryOrder() {
        String[] coloumn = {"ID", "Tanggal", "Nama", "No. HP", "Status", "Layanan", "Berat", "Harga"};
        DefaultTableModel table = new DefaultTableModel(null, coloumn){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            String query = "SELECT * FROM orders JOIN user ON orders.user_id = user.id JOIN service ON orders.service_id = service.id;";
            Connection conn = Database.Connect();
            Statement state = conn.createStatement();
            ResultSet result = state.executeQuery(query);
            
            while (result.next()) {
                String id = result.getString("order_id");
                String tanggal = result.getString("order_date");
                String nama = result.getString("nama");
                String noHp = result.getString("phone_number");
                String status = result.getString("status");
                String layanan = result.getString("name");
                String berat = result.getString("amount");
                String harga = "Rp. " + result.getInt("total_price");
                
                table.addRow(new String[] {id, tanggal, nama, noHp, status, layanan, berat, harga});
            }
        } catch (SQLException e) {
            System.err.println("SQLException : " + e.getMessage());
        }
        
        historyOrderTable.setModel(table);
        sorter = new TableRowSorter<>(table);
        historyOrderTable.setRowSorter(sorter);
        historyOrderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        autoFitTableColumns(historyOrderTable);
    }

    public static void autoFitTableColumns(javax.swing.JTable table) {
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = 25;  // Lebar minimum
            int maxWidth = 300;  // Lebar maksimum

            // Mengambil lebar dari header kolom
            TableCellRenderer headerRenderer = table.getTableHeader().getDefaultRenderer();
            Component headerComponent = headerRenderer.getTableCellRendererComponent(table, tableColumn.getHeaderValue(), false, false, -1, column);
            preferredWidth = Math.max(preferredWidth, headerComponent.getPreferredSize().width);

            // Mengambil lebar dari setiap sel pada kolom tersebut
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component cellComponent = table.prepareRenderer(cellRenderer, row, column);
                preferredWidth = Math.max(preferredWidth, cellComponent.getPreferredSize().width);
                
                // Batasi lebar agar tidak terlalu besar
                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            // Mengatur lebar kolom
            tableColumn.setPreferredWidth(preferredWidth + 10);  // Tambahkan padding
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allOrderTable;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JTextField amountPriceTextField;
    private rojerusan.RSMaterialButtonRectangle createOrderButton;
    private javax.swing.JLabel customerNameAlert;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JLabel customerPhoneAlert;
    private javax.swing.JLabel customerPhoneLabel;
    private javax.swing.JTextField customerPhoneTextField;
    private rojerusan.RSMaterialButtonRectangle deleteOrderButton;
    private rojerusan.RSMaterialButtonRectangle editOrderButton;
    private javax.swing.JButton historyButton;
    private javax.swing.JTable historyOrderTable;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton orderButton;
    private javax.swing.JLabel orderFormLabel;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JTextField searchOrderTextField;
    private javax.swing.JComboBox<Service> serviceComboBox;
    private javax.swing.JLabel serviceLabel;
    private javax.swing.JPanel sidebarPanel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel updateOrderLabel;
    private javax.swing.JLabel updateOrderLabel1;
    private javax.swing.JPanel updatePanel;
    private javax.swing.JLabel weigthAlert;
    private javax.swing.JLabel weigthLabel;
    private javax.swing.JLabel weigthLabel1;
    private javax.swing.JTextField weigthTextField;
    // End of variables declaration//GEN-END:variables
}
